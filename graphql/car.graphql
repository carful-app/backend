extend type Query @guard {
    "Get all cars of the auth user"
    cars: [Car!]! @all @whereAuth(relation: "user") @softDeletes
}

extend type Mutation @guard {
    "Create a new car"
    createCar(input: CreateCarInput! @spread): Car!
        @create
        @inject(context: "user.id", name: "user_id")

    "Update a car"
    updateCar(input: UpdateCarInput! @spread): Car! @update

    "Delete a car"
    deleteCar(input: DeleteCarInput! @spread): Car! @delete

    "Set a car as default for the user"
    setDefaultCar(id: ID): [Car!]!
        @field(resolver: "App\\GraphQL\\Mutations\\Cars\\SetDefaultCar")
}

input CreateCarInput {
    "The name of the car"
    name: String!

    "The registration number of the car"
    registrationNumber: String! @rename(attribute: "registration_number")
}

input UpdateCarInput {
    "The ID of the car"
    id: ID!

    "The name of the car"
    name: String

    "The registration number of the car"
    registrationNumber: String @rename(attribute: "registration_number")
}

input DeleteCarInput {
    "The ID of the car"
    id: ID! @whereKey
}

type Car {
    "The ID of the car"
    id: ID!

    "The name of the car"
    name: String!

    "The registration number of the car"
    registrationNumber: String! @rename(attribute: "registration_number")

    "Is the car default for the user"
    isDefault: Boolean! @rename(attribute: "is_default")

    "The user who owns the car"
    user: User! @belongsTo
}
